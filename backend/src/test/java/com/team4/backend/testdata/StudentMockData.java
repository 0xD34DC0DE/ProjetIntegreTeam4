package com.team4.backend.testdata;

import com.team4.backend.dto.StudentDetailsDto;
import com.team4.backend.dto.UserDto;
import com.team4.backend.model.Student;
import com.team4.backend.model.enums.StudentState;
import reactor.core.publisher.Flux;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.*;

public abstract class StudentMockData {

    public static Student getMockStudent() {
        return Student.studentBuilder()
                .id("mock_id")
                .email("123456789@gmail.com")
                .password("passwd")
                .firstName("John")
                .lastName("Doe")
                .phoneNumber("123-456-7890")
                .studentState(StudentState.NO_INTERVIEW)
                .hasValidCv(false)
                .registrationDate(null) // Autogenerated (creation time) when null
                .exclusiveOffersId(getListExclusiveOfferIds())
                .interviewsDate(new TreeSet<>(Arrays.asList(
                        LocalDate.now().minusWeeks(3),
                        LocalDate.now(),
                        LocalDate.now().minusDays(5))))
                .appliedOffersId(new HashSet<>())
                .evaluationsDates(Set.of(LocalDate.of(2019,4,4), LocalDate.of(2020,9,4), LocalDate.now()))
                .build();
    }

    public static Student getMockSecondStudent() {
        return Student.studentBuilder().id("000111222abc").email("eleve@gmail.com").password("mdpEleve")
                .firstName("Luigi").lastName("Bros").phoneNumber("514-444-1235")
                .studentState(StudentState.NO_INTERVIEW).hasCv(false)
                .hasValidCv(false).registrationDate(null)
                .evaluationsDates(Set.of(LocalDate.of(2018,4,4), LocalDate.of(2020,9,4), LocalDate.now()))// Autogenerated (creation time) when null
                .build();
    }

    public static StudentDetailsDto getMockStudentDto() {
        return StudentDetailsDto.builder()
                .id("mock_id")
                .email("123456789@gmail.com")
                .password("passwd")
                .firstName("John")
                .lastName("Doe")
                .phoneNumber("123-456-7890")
                .studentState(StudentState.NO_INTERVIEW)
                .hasValidCv(false)
                .registrationDate(null) // Autogenerated (creation time) when null
                .build();
    }

    public static Flux<Student> getAllStudentsFlux() {
        Set<LocalDate> evaluationsDates = new TreeSet<>();

        evaluationsDates.add(LocalDate.of(2019,4,4));
        evaluationsDates.add(LocalDate.of(2020,9,4));
        evaluationsDates.add(LocalDate.now());
        return Flux.just(
                Student.studentBuilder()
                        .id("mock_id")
                        .email("123456789@gmail.com")
                        .password("passwd")
                        .firstName("John")
                        .lastName("Doe")
                        .phoneNumber("123-456-7890")
                        .studentState(StudentState.NO_INTERVIEW)
                        .hasValidCv(false)
                        .registrationDate(null) // Autogenerated (creation time) when null
                        .exclusiveOffersId(getListExclusiveOfferIds())
                        .evaluationsDates(new TreeSet<>())
                        .appliedOffersId(new HashSet<>())
                        .interviewsDate(new TreeSet<>(Arrays.asList(
                                LocalDate.now().minusWeeks(3),
                                LocalDate.now(),
                                LocalDate.now().minusDays(5))))
                        .build(),
                Student.studentBuilder()
                        .id("000111222abc")
                        .email("eleve@gmail.com")
                        .password("mdpEleve")
                        .firstName("Luigi")
                        .lastName("Bros")
                        .phoneNumber("514-444-1235")
                        .studentState(StudentState.NO_INTERVIEW)
                        .hasValidCv(false)
                        .registrationDate(null)
                        .evaluationsDates(evaluationsDates)// Autogenerated (creation time) when null
                        .build());
    }

    public static List<Student> getAllStudentsToUpdate() {
        return Arrays.asList(
                Student.studentBuilder()
                        .firstName("test")
                        .lastName("test")
                        .email("testing_1@gmail.com")
                        .password("password1")
                        .studentState(StudentState.WAITING_INTERVIEW)
                        .interviewsDate(new TreeSet<>(Arrays.asList(
                                LocalDate.now().minusWeeks(3),
                                LocalDate.now(),
                                LocalDate.now().minusDays(5))))
                        .build(),
                Student.studentBuilder()
                        .email("testing_2@gmail.com")
                        .firstName("test")
                        .lastName("test")
                        .studentState(StudentState.WAITING_INTERVIEW)
                        .password("password2")
                        .interviewsDate(new TreeSet<>())
                        .build()
        );
    }

    public static List<Student> getAllStudentsWithInternshipFound() {
        return Arrays.asList(
                Student.studentBuilder()
                        .firstName("test")
                        .lastName("test")
                        .email("testing_1@gmail.com")
                        .password("password1")
                        .studentState(StudentState.INTERNSHIP_FOUND)
                        .interviewsDate(new TreeSet<>(Arrays.asList(
                                LocalDate.now().minusWeeks(3),
                                LocalDate.now(),
                                LocalDate.now().minusDays(5))))
                        .build(),
                Student.studentBuilder()
                        .email("testing_2@gmail.com")
                        .firstName("test")
                        .lastName("test")
                        .studentState(StudentState.INTERNSHIP_FOUND)
                        .password("password2")
                        .interviewsDate(new TreeSet<>())
                        .build()
        );
    }

    public static List<Student> getListStudent(int count) {
        List<Student> students = new ArrayList<>();

        for (int i = 0; i < count; i++) {
            Student student = Student.studentBuilder()
                    .id("id_" + i)
                    .build();

            students.add(student);
        }

        return students;
    }

    public static Set<String> getListExclusiveOfferIds() {
        Set<String> exclusiveOffers = new HashSet<>();
        exclusiveOffers.add("exclusive_id_1");
        exclusiveOffers.add("exclusive_id_2");
        return exclusiveOffers;
    }

    public static Flux<Student> getAssignedStudents() {
        return Flux.just(Student.studentBuilder().email("12395432@gmail.com").build(),
                Student.studentBuilder().email("toto23@outlook.com").build());
    }

    public static Flux<UserDto> getAllFluxUserDto() {
        return Flux.just(
                    new UserDto("id1", "email1", "firstName1", "lastName1"),
                    new UserDto("id2", "email2", "firstName2", "lastName2"),
                    new UserDto("id3", "email3", "firstName3", "lastName3")
                );
    }

}
